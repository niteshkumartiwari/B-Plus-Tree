name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        compiler: [gcc, clang]
        exclude:
          # Windows doesn't have gcc/clang in the same way
          - os: windows-latest
            compiler: gcc
          - os: windows-latest
            compiler: clang
        include:
          # Add MSVC for Windows
          - os: windows-latest
            compiler: msvc

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup C++ Environment (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y gcc-11 g++-11
          echo "CC=gcc-11" >> $GITHUB_ENV
          echo "CXX=g++-11" >> $GITHUB_ENV
        elif [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get install -y clang-14
          echo "CC=clang-14" >> $GITHUB_ENV
          echo "CXX=clang++-14" >> $GITHUB_ENV
        fi

    - name: Setup C++ Environment (macOS)
      if: runner.os == 'macOS'
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          brew install gcc@11
          echo "CC=gcc-11" >> $GITHUB_ENV
          echo "CXX=g++-11" >> $GITHUB_ENV
        elif [ "${{ matrix.compiler }}" = "clang" ]; then
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        fi

    - name: Setup MSVC (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v1.3

    - name: Create DBFiles directory (Unix)
      if: runner.os != 'Windows'
      run: mkdir -p DBFiles

    - name: Create DBFiles directory (Windows)
      if: runner.os == 'Windows'
      run: |
        if (!(Test-Path "DBFiles")) { New-Item -ItemType Directory -Path "DBFiles" }
      shell: powershell

    - name: Build with Make (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "Current directory: $(pwd)"
        echo "Files in directory:"
        ls -la
        echo "Checking for Makefile..."
        if [ -f "Makefile" ]; then
          echo "‚úÖ Makefile found"
          echo "Available make targets:"
          make -n clean 2>/dev/null || echo "Clean target not available, skipping..."
          echo "Building project..."
          make clean || echo "Clean failed, continuing..."
          make all
        else
          echo "‚ùå Makefile not found, trying direct compilation..."
          mkdir -p DBFiles
          g++ -std=c++17 -Wall -Wextra -g -Iinclude -o bptree_demo src/*.cpp
          g++ -std=c++17 -Wall -Wextra -g -Iinclude -o basic_usage src/display.cpp src/insertion.cpp src/removal.cpp src/search.cpp src/utils.cpp examples/basic_usage.cpp
        fi

    - name: Build with CMake (Windows)
      if: runner.os == 'Windows'
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cmake --build . --config Release

    - name: Run Tests (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "Checking if executables exist..."
        ls -la bptree_demo basic_usage 2>/dev/null || echo "Some executables missing"
        echo "Running test suite..."
        chmod +x tests/test_suite.sh
        # Skip build in test suite since we already built
        # Run comprehensive test suite with detailed logging
        echo "========================================="
        echo "RUNNING COMPREHENSIVE TEST SUITE"
        echo "========================================="
        
        chmod +x tests/test_suite.sh
        
        # Run tests and capture output, but still show it in real-time
        if SKIP_BUILD=1 ./tests/test_suite.sh; then
          echo ""
          echo "‚úÖ ALL TESTS PASSED SUCCESSFULLY"
        else
          test_exit_code=$?
          echo ""
          echo "========================================="
          echo "‚ùå TESTS FAILED - DETAILED ANALYSIS"
          echo "========================================="
          echo "Exit code: $test_exit_code"
          echo ""
          
          # Re-run with more verbose output to capture failure details
          echo "üîç Re-running failed tests with detailed output..."
          echo ""
          
          # Run again to get detailed failure information
          SKIP_BUILD=1 ./tests/test_suite.sh 2>&1 | tee test_failure_log.txt || true
          
          echo ""
          echo "üìã FAILURE SUMMARY:"
          echo "==================="
          
          # Parse and display specific failure information
          if [ -f test_failure_log.txt ]; then
            echo "üìä Test Statistics:"
            grep -E "(Total Tests|Passed Tests|Failed Tests):" test_failure_log.txt || echo "Could not parse test statistics"
            echo ""
            
            echo "‚ùå Failed Test Details:"
            grep -E "\[ERROR\].*failed" test_failure_log.txt || echo "Could not parse failed test names"
            echo ""
            
            echo "üêõ Error Patterns Found:"
            grep -E "(exit code|segmentation fault|core dumped|ERROR)" test_failure_log.txt | head -10 || echo "No specific error patterns found"
            echo ""
            
            echo "üíæ Full failure log saved to test_failure_log.txt"
          fi
          
          echo ""
          echo "üö® CI FAILING DUE TO TEST FAILURES"
          echo "Please review the test output above and fix the failing tests"
          
          # Exit with the original test failure code
          exit $test_exit_code
        fi

    - name: Run Basic Test (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        cd build
        echo 4 > input.txt
        echo 3 >> input.txt
        echo 1 >> input.txt
        echo 101 >> input.txt
        echo Alice 20 85 >> input.txt
        echo 2 >> input.txt
        echo 101 >> input.txt
        echo 5 >> input.txt
        Release\bptree_demo.exe < input.txt

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.compiler }}
        path: |
          DBFiles/
          *.log
        retention-days: 7

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format-14 cppcheck

    - name: Check code formatting (informational)
      run: |
        echo "Checking code formatting (informational only)..."
        if find src include examples -name "*.cpp" -o -name "*.hpp" | xargs clang-format-14 --dry-run --Werror 2>/dev/null; then
          echo "‚úÖ Code formatting is consistent"
        else
          echo "‚ÑπÔ∏è  Code formatting could be improved"
          echo "To fix: find src include examples -name '*.cpp' -o -name '*.hpp' | xargs clang-format-14 -i"
        fi
        echo "‚úÖ Formatting check completed (non-blocking)"

    - name: Run static analysis (informational)
      run: |
        echo "Running static analysis (informational only)..."
        if cppcheck --enable=warning,performance --suppress=missingIncludeSystem --suppress=unusedFunction src/ include/ 2>/dev/null; then
          echo "‚úÖ Static analysis found no major issues"
        else
          echo "‚ÑπÔ∏è  Static analysis found some suggestions"
          echo "Review cppcheck output for potential improvements"
        fi
        echo "‚úÖ Static analysis completed (non-blocking)"

    - name: Check for TODO/FIXME
      run: |
        echo "Checking for TODO/FIXME comments..."
        if grep -r "TODO\|FIXME" src/ include/ examples/; then
          echo "‚ùå Found TODO/FIXME comments. Please resolve them."
          exit 1
        else
          echo "‚úÖ No TODO/FIXME comments found"
        fi

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check README links
      run: |
        echo "Checking README image references..."
        # Extract image references and check if files exist
        grep -o '!\[.*\](img/[^)]*)' README.md | sed 's/.*(//' | sed 's/).*//' > /tmp/images.txt || echo "No images found"
        if [ -s /tmp/images.txt ]; then
          while read img; do
            if [ -f "$img" ]; then
              echo "‚úÖ Found image: $img"
            else
              echo "‚ùå Missing image: $img"
              exit 1
            fi
          done < /tmp/images.txt
        fi
        echo "‚úÖ All referenced images found"

    - name: Validate project structure
      run: |
        echo "Current directory: $(pwd)"
        echo "All files and directories:"
        ls -la
        
        echo "Checking essential files..."
        missing_files=0
        for file in README.md LICENSE CONTRIBUTING.md CHANGELOG.md; do
          if [ -f "$file" ]; then
            echo "‚úÖ Found file: $file"
          else
            echo "‚ùå Missing essential file: $file"
            missing_files=$((missing_files + 1))
          fi
        done
        
        echo "Checking directory structure..."
        missing_dirs=0
        for dir in src include tests examples; do
          if [ -d "$dir" ]; then
            echo "‚úÖ Found directory: $dir"
            echo "  Contents: $(ls -la $dir | wc -l) items"
          else
            echo "‚ùå Missing essential directory: $dir"
            echo "  Checking if directory exists with different case..."
            ls -la | grep -i "$dir" || echo "  No similar directory found"
            missing_dirs=$((missing_dirs + 1))
          fi
        done
        
        if [ $missing_files -gt 0 ] || [ $missing_dirs -gt 0 ]; then
          echo "‚ùå Project structure validation failed"
          echo "Missing files: $missing_files, Missing directories: $missing_dirs"
          exit 1
        else
          echo "‚úÖ Project structure validation passed"
        fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run basic security checks
      run: |
        echo "Running basic security checks..."
        
        # Check for common security issues in C++ code
        echo "Checking for potential security vulnerabilities..."
        
        # Check for unsafe functions
        if grep -r "gets\|strcpy\|strcat\|sprintf\|scanf" src/ include/ examples/ 2>/dev/null; then
          echo "‚ö†Ô∏è  Found potentially unsafe functions"
        else
          echo "‚úÖ No unsafe functions found"
        fi
        
        # Check for hardcoded credentials or secrets
        if grep -ri "password\|secret\|key\|token" src/ include/ examples/ 2>/dev/null | grep -v "// " | grep -v "/\*" | head -5; then
          echo "‚ö†Ô∏è  Potential hardcoded credentials found (review manually)"
        else
          echo "‚úÖ No obvious hardcoded credentials found"
        fi
        
        echo "‚úÖ Basic security scan completed"

    - name: Additional security checks
      run: |
        echo "Running additional security analysis..."
        
        # Check for buffer overflow vulnerabilities
        if grep -r "strcpy\|strcat\|gets\|sprintf" src/ include/ examples/ 2>/dev/null; then
          echo "‚ö†Ô∏è  Found potentially unsafe string functions"
          echo "Consider using safer alternatives like strncpy, strncat, snprintf"
        fi
        
        # Check for format string vulnerabilities
        if grep -r "printf.*%.*," src/ include/ examples/ 2>/dev/null | grep -v "snprintf\|fprintf.*\"" | head -3; then
          echo "‚ö†Ô∏è  Potential format string vulnerabilities found"
        fi
        
        echo "‚úÖ Security analysis completed"